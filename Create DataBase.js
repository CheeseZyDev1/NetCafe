const { Sequelize, DataTypes } = require('sequelize');
const path = require('path');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: path.join(__dirname, 'netcafe-db.sqlite'),
    logging: false
});

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
const User = sequelize.define('User', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    name: { type: DataTypes.STRING, allowNull: false },
    email: { type: DataTypes.STRING, unique: true },
    phone: { type: DataTypes.STRING }
}, { tableName: 'users', timestamps: true });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á computers - ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô
const Computer = sequelize.define('Computer', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    name: { type: DataTypes.STRING, allowNull: false },
    status: { type: DataTypes.ENUM('available', 'in-use', 'maintenance'), defaultValue: 'available' }
}, { tableName: 'computers', timestamps: true });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á time_packages - ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏ß‡∏•‡∏≤
const TimePackage = sequelize.define('TimePackage', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    duration: { type: DataTypes.INTEGER, allowNull: false }, // ‡∏ô‡∏≤‡∏ó‡∏µ
    price: { type: DataTypes.FLOAT, allowNull: false }
}, { tableName: 'time_packages', timestamps: false });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á promotions - ‡∏à‡∏±‡∏î‡πÇ‡∏õ‡∏£‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤
const Promotion = sequelize.define('Promotion', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    name: { type: DataTypes.STRING, allowNull: false },
    discountPercent: { type: DataTypes.FLOAT, allowNull: true }, // ‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏î 10%
    specialPrice: { type: DataTypes.FLOAT, allowNull: true } // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à
}, { tableName: 'promotions', timestamps: true });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á sessions - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°
const Session = sequelize.define('Session', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    startTime: { type: DataTypes.DATE, allowNull: false, defaultValue: Sequelize.NOW },
    endTime: { type: DataTypes.DATE },
    duration: { type: DataTypes.INTEGER }, // ‡∏ô‡∏≤‡∏ó‡∏µ
    price: { type: DataTypes.FLOAT, allowNull: true } // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
}, { tableName: 'sessions', timestamps: true });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á payments - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
const Payment = sequelize.define('Payment', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    amount: { type: DataTypes.FLOAT, allowNull: false },
    method: { type: DataTypes.ENUM('cash', 'credit', 'paypal'), allowNull: false },
    status: { type: DataTypes.ENUM('pending', 'completed', 'failed'), defaultValue: 'pending' }
}, { tableName: 'payments', timestamps: true });

// üìå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
User.hasMany(Session, { as: 'sessions', foreignKey: 'userId' });
Session.belongsTo(User, { as: 'user', foreignKey: 'userId' });

Computer.hasMany(Session, { as: 'sessions', foreignKey: 'computerId' });
Session.belongsTo(Computer, { as: 'computer', foreignKey: 'computerId' });

Session.belongsTo(TimePackage, { as: 'timePackage', foreignKey: 'packageId' });
TimePackage.hasMany(Session, { as: 'sessions', foreignKey: 'packageId' });

Session.belongsTo(Promotion, { as: 'promotion', foreignKey: 'promotionId' });
Promotion.hasMany(Session, { as: 'sessions', foreignKey: 'promotionId' });

Session.hasOne(Payment, { as: 'payment', foreignKey: 'sessionId' });
Payment.belongsTo(Session, { as: 'session', foreignKey: 'sessionId' });

// üöÄ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
sequelize.sync({ force: true })
    .then(() => console.log("‚úÖ Database synced with time packages and promotions!"))
    .catch(err => console.error("‚ùå Sync error:", err));

// üïê ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏ß‡∏•‡∏≤
async function addTimePackages() {
    await TimePackage.bulkCreate([
        { duration: 30, price: 15 },
        { duration: 60, price: 25 },
        { duration: 120, price: 45 },
        { duration: 180, price: 60 },
        { duration: 360, price: 100 },
        { duration: 720, price: 180 }
    ]);
    console.log("‚úÖ ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
}

// üéÅ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
async function addPromotions() {
    await Promotion.bulkCreate([
        { name: "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%", discountPercent: 10 },
        { name: "‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© 6 ‡∏ä‡∏°. ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 80 ‡∏ö‡∏≤‡∏ó", specialPrice: 80 }
    ]);
    console.log("‚úÖ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
}

// üí∞ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à
async function buyTimePackage(userId, packageId, promotionId = null) {
    const timePackage = await TimePackage.findByPk(packageId);
    if (!timePackage) return console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ô‡∏µ‡πâ");

    let finalPrice = timePackage.price;
    if (promotionId) {
        const promotion = await Promotion.findByPk(promotionId);
        if (promotion) {
            if (promotion.discountPercent) {
                finalPrice *= (1 - promotion.discountPercent / 100);
            } else if (promotion.specialPrice) {
                finalPrice = promotion.specialPrice;
            }
        }
    }

    const session = await Session.create({
        userId, 
        packageId, 
        promotionId, 
        duration: timePackage.duration, 
        price: finalPrice, 
        startTime: new Date(),
        endTime: new Date(Date.now() + timePackage.duration * 60000)
    });

    console.log(`‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ${timePackage.duration} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏£‡∏≤‡∏Ñ‡∏≤ ${finalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó`);
}

// üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function runExample() {
    await addTimePackages();
    await addPromotions();

    const user = await User.create({ name: "John Doe", email: "john@example.com", phone: "0812345678" });

    // ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 2 ‡∏ä‡∏°. ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡∏•‡∏î 10%
    await buyTimePackage(user.id, 3, 1);

    // ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 6 ‡∏ä‡∏°. ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏õ‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© 80 ‡∏ö‡∏≤‡∏ó
    await buyTimePackage(user.id, 5, 2);
}

runExample();
