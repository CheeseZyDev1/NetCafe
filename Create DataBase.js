const { Sequelize, DataTypes } = require('sequelize');
const path = require('path');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: path.join(__dirname, 'netcafe-db.sqlite'),
    logging: false
});

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
const User = sequelize.define('User', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    name: { type: DataTypes.STRING, allowNull: false },
    email: { type: DataTypes.STRING, unique: true },
    phone: { type: DataTypes.STRING }
}, { tableName: 'users', timestamps: true });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á snacks - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
const Snack = sequelize.define('Snack', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    name: { type: DataTypes.STRING, allowNull: false },
    price: { type: DataTypes.FLOAT, allowNull: false },
    category: { 
        type: DataTypes.ENUM('potato', 'drink', 'milk', 'noodle', 'rice'), 
        allowNull: false 
    }
}, { tableName: 'snacks', timestamps: false });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á snack_promotions - ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏°
const SnackPromotion = sequelize.define('SnackPromotion', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    name: { type: DataTypes.STRING, allowNull: false },
    discountPercent: { type: DataTypes.FLOAT, allowNull: true }, // ‡∏•‡∏î 10%
    buyAmount: { type: DataTypes.INTEGER, allowNull: true }, // ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏ö‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô
    freeAmount: { type: DataTypes.INTEGER, allowNull: true } // ‡πÅ‡∏ñ‡∏°‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô
}, { tableName: 'snack_promotions', timestamps: true });

// üéØ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
const Order = sequelize.define('Order', {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    quantity: { type: DataTypes.INTEGER, allowNull: false, defaultValue: 1 },
    totalPrice: { type: DataTypes.FLOAT, allowNull: false }
}, { tableName: 'orders', timestamps: true });

// üìå ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
User.hasMany(Order, { as: 'orders', foreignKey: 'userId' });
Order.belongsTo(User, { as: 'user', foreignKey: 'userId' });

Snack.hasMany(Order, { as: 'orders', foreignKey: 'snackId' });
Order.belongsTo(Snack, { as: 'snack', foreignKey: 'snackId' });

Snack.hasMany(SnackPromotion, { as: 'promotions', foreignKey: 'snackId' });
SnackPromotion.belongsTo(Snack, { as: 'snack', foreignKey: 'snackId' });

// üöÄ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
sequelize.sync({ force: true })
    .then(() => console.log("‚úÖ Database synced with snack categories!"))
    .catch(err => console.error("‚ùå Sync error:", err));

// üõí ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° (1-5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
async function addSnacks() {
    await Snack.bulkCreate([
        { name: '‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏î ‡πÄ‡∏•‡πá‡∏Å', price: 20, category: 'potato' },
        { name: '‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏î ‡∏Å‡∏•‡∏≤‡∏á', price: 30, category: 'potato' },
        { name: '‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏î ‡πÉ‡∏´‡∏ç‡πà', price: 40, category: 'potato' },
        { name: '‡πÇ‡∏Ñ‡πâ‡∏Å', price: 20, category: 'drink' },
        { name: '‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤', price: 10, category: 'drink' },
        { name: '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', price: 25, category: 'drink' },
        { name: '‡∏ô‡∏°‡∏à‡∏∑‡∏î', price: 15, category: 'milk' },
        { name: '‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô', price: 20, category: 'milk' },
        { name: '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏£‡∏™‡∏ï‡πâ‡∏°‡∏¢‡∏≥', price: 30, category: 'noodle' },
        { name: '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏£‡∏™‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö', price: 25, category: 'noodle' },
        { name: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß', price: 40, category: 'rice' },
        { name: '‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÑ‡∏Å‡πà', price: 50, category: 'rice' }
    ]);
    console.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
}

// üéÅ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏ô‡∏°
async function addSnackPromotions() {
    await SnackPromotion.bulkCreate([
        { name: "‡∏ã‡∏∑‡πâ‡∏≠ 2 ‡πÅ‡∏ñ‡∏° 1", buyAmount: 2, freeAmount: 1 },
        { name: "‡∏•‡∏î 10% ‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", discountPercent: 10 }
    ]);
    console.log("‚úÖ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏ô‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
}

// ü•§ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°
async function createOrder(userId, snackId, quantity = 1) {
    if (quantity < 1 || quantity > 5) {
        return console.log("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1-5 ‡∏ä‡∏¥‡πâ‡∏ô");
    }

    const snack = await Snack.findByPk(snackId);
    if (!snack) return console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ");

    let totalQuantity = quantity;
    let totalPrice = snack.price * quantity;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    const promotions = await SnackPromotion.findAll({ where: { snackId } });
    for (const promo of promotions) {
        if (promo.discountPercent) {
            totalPrice *= (1 - promo.discountPercent / 100);
        }
        if (promo.buyAmount && promo.freeAmount && quantity >= promo.buyAmount) {
            totalQuantity += promo.freeAmount; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°
        }
    }

    await Order.create({ userId, snackId, quantity: totalQuantity, totalPrice });

    console.log(`‚úÖ ‡∏™‡∏±‡πà‡∏á ${snack.name} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${quantity} ‡∏ä‡∏¥‡πâ‡∏ô (‡∏£‡∏ß‡∏°‡πÅ‡∏ñ‡∏° ${totalQuantity}) | ‡∏£‡∏ß‡∏° ${totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó`);
}

// üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function runExample() {
    await addSnacks();
    await addSnackPromotions();

    const user = await User.create({ name: "John Doe", email: "john@example.com", phone: "0812345678" });

    // ‡∏™‡∏±‡πà‡∏á‡∏°‡∏±‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡∏ó‡∏≠‡∏î (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3 ‡∏ä‡∏¥‡πâ‡∏ô)
    await createOrder(user.id, 1, 3);

    // ‡∏™‡∏±‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏Å 2 ‡∏Ç‡∏ß‡∏î (‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏•‡∏î 10%)
    await createOrder(user.id, 4, 2);

    // ‡∏™‡∏±‡πà‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß 1 ‡∏à‡∏≤‡∏ô
    await createOrder(user.id, 11, 1);
}

runExample();
